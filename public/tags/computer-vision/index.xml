<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer Vision on I√±aki‚Äôs Log</title>
    <link>http://localhost:1313/tags/computer-vision/</link>
    <description>Recent content in Computer Vision on I√±aki‚Äôs Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Oct 2023 11:16:19 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/computer-vision/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üë®üèª‚Äçüíª Projective Geometry: Estimating the homography matrix</title>
      <link>http://localhost:1313/posts/projective_geometry/estimating_homography_matrix/</link>
      <pubDate>Sun, 15 Oct 2023 11:16:19 +0100</pubDate>
      <guid>http://localhost:1313/posts/projective_geometry/estimating_homography_matrix/</guid>
      <description>Table of Contents 1. Introduction 2. Via geometric features 2.1. From points/lines 2.1.1. Problem formulation 2.1.2. Noise amplification: the horizon line 2.1.3. Solution: least squares estimator 2.2. From conics 2.3. From multiple features 3. Via a pair images 4. Via ML model 5. Summary 6. References 1. Introduction So far, we have figured out how to:
Mathematically characterize the transform between the 3D world and a 2D image of it Map different types of objects between the two domains However, one might wonder: how do we actually compute the homography matrix that fully describes that transform in the first place?</description>
    </item>
    <item>
      <title>üìê Projective Geometry: Projecting between domains</title>
      <link>http://localhost:1313/posts/projective_geometry/projecting_between_domains/</link>
      <pubDate>Mon, 10 Jul 2023 11:16:19 +0100</pubDate>
      <guid>http://localhost:1313/posts/projective_geometry/projecting_between_domains/</guid>
      <description>Table of Contents 1. Motivation: sports analytics 2. Points 3. Lines 4. Conics 4.1. Projection 4.2. Distortion: Objects behind the camera plane 5. Images 5.1. Projection via object decomposition 6. References 1. Motivation: sports analytics At this point, we know how to mathematically characterise the mapping between the 3D world and a 2D image capturing it. So it seems natural to wonder: what can we do with it? In this post, I will focus on a use case that I happen to be familiar with, but there are many others you can think of.</description>
    </item>
    <item>
      <title>üìΩÔ∏è Projective Geometry: Building the Homography Matrix from scratch</title>
      <link>http://localhost:1313/posts/projective_geometry/buiding_homograpahy_matrix/</link>
      <pubDate>Wed, 05 Apr 2023 11:16:19 +0100</pubDate>
      <guid>http://localhost:1313/posts/projective_geometry/buiding_homograpahy_matrix/</guid>
      <description>Table of Contents 1. Pinhole camera model 2. Intrinsic matrix 2.1. Setup 2.2. Homogeneous coordinates 2.3. Accounting for distortions 2.3.1. Digital images 2.3.2. Rephotographing Images 3. Extrinsic matrix 4. Homography matrix 5. References 1. Pinhole camera model When we capture something on camera, there is an interesting phenomenon going on: compression. We are taking a photograph of a 3D world, and capturing it in a 2D image. This 3D‚Üí2D space mapping inevitably leads to information loss.</description>
    </item>
  </channel>
</rss>
